ARG NODE_VERSION=19
ARG ALPINE_VERSION=3.16

FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS deps
RUN apk add --no-cache rsync

RUN npm install -g pnpm

WORKDIR /workspace-install

COPY pnpm-lock.yaml pnpm-workspace.yaml ./

RUN --mount=type=bind,target=/docker-context \
  rsync -amv --delete \
  --exclude="node_modules" \
  --exclude="*/node_modules" \
  --include="package.json" \
  --include="schema.prisma" \
  --include="*/" --exclude="*" \
  /docker-context/ /workspace-install/;

ENV PRISMA_CLI_BINARY_TARGETS=linux-musl

RUN --mount=type=cache,target=/root/.pnpm-store,id=pnpm-store \
  pnpm install --frozen-lockfile



FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS builder
ENV NODE_ENV=production
ENV NEXTJS_IGNORE_ESLINT=1
ENV NEXTJS_IGNORE_TYPECHECK=0

WORKDIR /app

COPY ./ ./
COPY --from=deps /workspace-install ./

RUN pnpm --filter web build

RUN --mount=type=cache,target=/root/.pnpm-store,id=pnpm-store \
  pnpm install --filter web --frozen-lockfile --prod



FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS runner

WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs && adduser --system --uid 1001 nextjs

COPY --from=builder /app/apps/web/next.config.js \
  /app/apps/web/package.json \
  ./apps/web/
COPY --from=builder /app/apps/api/public/ ./apps/api/public/
COPY --from=builder /app/apps/web/.next/ ./apps/web/.next/
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/ ./node_modules/
COPY --from=builder /app/package.json ./package.json

USER nextjs

EXPOSE 3000

ENV NEXT_TELEMETRY_DISABLED 1

CMD ["./node_modules/.bin/next", "start", "apps/nextjs-app/",]



FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS develop
ENV NODE_ENV=development

RUN npm install -g pnpm

WORKDIR /app

COPY --from=deps /workspace-install ./

EXPOSE 3000

WORKDIR /app/apps/web

CMD ["pnpm", "dev"]
